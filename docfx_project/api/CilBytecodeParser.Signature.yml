### YamlMime:ManagedReference
items:
- uid: CilBytecodeParser.Signature
  commentId: T:CilBytecodeParser.Signature
  id: Signature
  parent: CilBytecodeParser
  children:
  - CilBytecodeParser.Signature.#ctor(System.Byte[],System.Reflection.Module)
  - CilBytecodeParser.Signature.CallingConvention
  - CilBytecodeParser.Signature.ExplicitThis
  - CilBytecodeParser.Signature.GetParamType(System.Int32)
  - CilBytecodeParser.Signature.GetParamTypes
  - CilBytecodeParser.Signature.HasThis
  - CilBytecodeParser.Signature.ParamsCount
  - CilBytecodeParser.Signature.ParamTypes
  - CilBytecodeParser.Signature.ReturnType
  - CilBytecodeParser.Signature.ToString
  langs:
  - csharp
  - vb
  name: Signature
  nameWithType: Signature
  fullName: CilBytecodeParser.Signature
  type: Class
  source:
    path: CilBytecodeParser
    isExternal: true
  assemblies:
  - CilBytecodeParser
  namespace: CilBytecodeParser
  summary: "\nEncapsulates function&apos;s return type, calling convention and parameter types\n"
  syntax:
    content: public class Signature
    content.vb: Public Class Signature
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: CilBytecodeParser.Signature.#ctor(System.Byte[],System.Reflection.Module)
  commentId: M:CilBytecodeParser.Signature.#ctor(System.Byte[],System.Reflection.Module)
  id: '#ctor(System.Byte[],System.Reflection.Module)'
  parent: CilBytecodeParser.Signature
  langs:
  - csharp
  - vb
  name: Signature(Byte[], Module)
  nameWithType: Signature.Signature(Byte[], Module)
  fullName: CilBytecodeParser.Signature.Signature(System.Byte[], System.Reflection.Module)
  type: Constructor
  source:
    path: CilBytecodeParser
    isExternal: true
  assemblies:
  - CilBytecodeParser
  namespace: CilBytecodeParser
  summary: "\nInitializes a new Signature object representing a stand-alone method signature\n"
  syntax:
    content: public Signature(byte[] data, Module module)
    parameters:
    - id: data
      type: System.Byte[]
      description: The byte array containing StandAloneMethodSig data (ECMA-335 II.23.2.3)
    - id: module
      type: System.Reflection.Module
      description: Module containing the passed signature
    content.vb: Public Sub New(data As Byte(), module As  Module)
  overload: CilBytecodeParser.Signature.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Source array is null
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Source array is empty
  - type: System.IO.EndOfStreamException
    commentId: T:System.IO.EndOfStreamException
    description: Unexpected end of input data
  - type: CilBytecodeParser.CilParserException
    commentId: T:CilBytecodeParser.CilParserException
    description: Input data is invalid
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: Signature contains generic types, function pointers or variable-bound arrays
  nameWithType.vb: Signature.Signature(Byte(), Module)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CilBytecodeParser.Signature.Signature(System.Byte(), System.Reflection.Module)
  name.vb: Signature(Byte(), Module)
- uid: CilBytecodeParser.Signature.GetParamType(System.Int32)
  commentId: M:CilBytecodeParser.Signature.GetParamType(System.Int32)
  id: GetParamType(System.Int32)
  parent: CilBytecodeParser.Signature
  langs:
  - csharp
  - vb
  name: GetParamType(Int32)
  nameWithType: Signature.GetParamType(Int32)
  fullName: CilBytecodeParser.Signature.GetParamType(System.Int32)
  type: Method
  source:
    path: CilBytecodeParser
    isExternal: true
  assemblies:
  - CilBytecodeParser
  namespace: CilBytecodeParser
  summary: "\nGets the type of parameter with the specified index\n"
  syntax:
    content: public TypeSpec GetParamType(int index)
    parameters:
    - id: index
      type: System.Int32
      description: Index of the requested parameter
    return:
      type: CilBytecodeParser.TypeSpec
      description: The type of requested parameter
    content.vb: Public Function GetParamType(index As Integer) As TypeSpec
  overload: CilBytecodeParser.Signature.GetParamType*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Index is negative or outside the bounds of collection
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CilBytecodeParser.Signature.GetParamTypes
  commentId: M:CilBytecodeParser.Signature.GetParamTypes
  id: GetParamTypes
  parent: CilBytecodeParser.Signature
  langs:
  - csharp
  - vb
  name: GetParamTypes()
  nameWithType: Signature.GetParamTypes()
  fullName: CilBytecodeParser.Signature.GetParamTypes()
  type: Method
  source:
    path: CilBytecodeParser
    isExternal: true
  assemblies:
  - CilBytecodeParser
  namespace: CilBytecodeParser
  summary: "\nGets the array of fixed parameter types that the function described by this signature takes\n"
  syntax:
    content: public TypeSpec[] GetParamTypes()
    return:
      type: CilBytecodeParser.TypeSpec[]
    content.vb: Public Function GetParamTypes As TypeSpec()
  overload: CilBytecodeParser.Signature.GetParamTypes*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CilBytecodeParser.Signature.ToString
  commentId: M:CilBytecodeParser.Signature.ToString
  id: ToString
  parent: CilBytecodeParser.Signature
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Signature.ToString()
  fullName: CilBytecodeParser.Signature.ToString()
  type: Method
  source:
    path: CilBytecodeParser
    isExternal: true
  assemblies:
  - CilBytecodeParser
  namespace: CilBytecodeParser
  summary: "\nGets the textual representation of this signature as CIL code\n"
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: CilBytecodeParser.Signature.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: CilBytecodeParser.Signature.CallingConvention
  commentId: P:CilBytecodeParser.Signature.CallingConvention
  id: CallingConvention
  parent: CilBytecodeParser.Signature
  langs:
  - csharp
  - vb
  name: CallingConvention
  nameWithType: Signature.CallingConvention
  fullName: CilBytecodeParser.Signature.CallingConvention
  type: Property
  source:
    path: CilBytecodeParser
    isExternal: true
  assemblies:
  - CilBytecodeParser
  namespace: CilBytecodeParser
  summary: "\nReturns calling convention of the function described by this signature\n"
  syntax:
    content: public CallingConvention CallingConvention { get; }
    parameters: []
    return:
      type: CilBytecodeParser.CallingConvention
    content.vb: Public ReadOnly Property CallingConvention As CallingConvention
  overload: CilBytecodeParser.Signature.CallingConvention*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CilBytecodeParser.Signature.HasThis
  commentId: P:CilBytecodeParser.Signature.HasThis
  id: HasThis
  parent: CilBytecodeParser.Signature
  langs:
  - csharp
  - vb
  name: HasThis
  nameWithType: Signature.HasThis
  fullName: CilBytecodeParser.Signature.HasThis
  type: Property
  source:
    path: CilBytecodeParser
    isExternal: true
  assemblies:
  - CilBytecodeParser
  namespace: CilBytecodeParser
  summary: "\nGets the value indicating whether the function described by this signature uses an instance pointer\n"
  syntax:
    content: public bool HasThis { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property HasThis As Boolean
  overload: CilBytecodeParser.Signature.HasThis*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CilBytecodeParser.Signature.ExplicitThis
  commentId: P:CilBytecodeParser.Signature.ExplicitThis
  id: ExplicitThis
  parent: CilBytecodeParser.Signature
  langs:
  - csharp
  - vb
  name: ExplicitThis
  nameWithType: Signature.ExplicitThis
  fullName: CilBytecodeParser.Signature.ExplicitThis
  type: Property
  source:
    path: CilBytecodeParser
    isExternal: true
  assemblies:
  - CilBytecodeParser
  namespace: CilBytecodeParser
  summary: "\nGets the value indicating whether the instance pointer is included explicitly in this signature\n"
  syntax:
    content: public bool ExplicitThis { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property ExplicitThis As Boolean
  overload: CilBytecodeParser.Signature.ExplicitThis*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CilBytecodeParser.Signature.ReturnType
  commentId: P:CilBytecodeParser.Signature.ReturnType
  id: ReturnType
  parent: CilBytecodeParser.Signature
  langs:
  - csharp
  - vb
  name: ReturnType
  nameWithType: Signature.ReturnType
  fullName: CilBytecodeParser.Signature.ReturnType
  type: Property
  source:
    path: CilBytecodeParser
    isExternal: true
  assemblies:
  - CilBytecodeParser
  namespace: CilBytecodeParser
  summary: "\nGets the return type of the function described by this signature\n"
  syntax:
    content: public TypeSpec ReturnType { get; }
    parameters: []
    return:
      type: CilBytecodeParser.TypeSpec
    content.vb: Public ReadOnly Property ReturnType As TypeSpec
  overload: CilBytecodeParser.Signature.ReturnType*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CilBytecodeParser.Signature.ParamsCount
  commentId: P:CilBytecodeParser.Signature.ParamsCount
  id: ParamsCount
  parent: CilBytecodeParser.Signature
  langs:
  - csharp
  - vb
  name: ParamsCount
  nameWithType: Signature.ParamsCount
  fullName: CilBytecodeParser.Signature.ParamsCount
  type: Property
  source:
    path: CilBytecodeParser
    isExternal: true
  assemblies:
  - CilBytecodeParser
  namespace: CilBytecodeParser
  summary: "\nGets the amount of fixed parameters that the function described by this signature takes\n"
  syntax:
    content: public int ParamsCount { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property ParamsCount As Integer
  overload: CilBytecodeParser.Signature.ParamsCount*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CilBytecodeParser.Signature.ParamTypes
  commentId: P:CilBytecodeParser.Signature.ParamTypes
  id: ParamTypes
  parent: CilBytecodeParser.Signature
  langs:
  - csharp
  - vb
  name: ParamTypes
  nameWithType: Signature.ParamTypes
  fullName: CilBytecodeParser.Signature.ParamTypes
  type: Property
  source:
    path: CilBytecodeParser
    isExternal: true
  assemblies:
  - CilBytecodeParser
  namespace: CilBytecodeParser
  summary: "\nEnumerates types of fixed parameters that the function described by this signature takes\n"
  syntax:
    content: public IEnumerable<TypeSpec> ParamTypes { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{CilBytecodeParser.TypeSpec}
    content.vb: Public ReadOnly Property ParamTypes As IEnumerable(Of TypeSpec)
  overload: CilBytecodeParser.Signature.ParamTypes*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: CilBytecodeParser
  commentId: N:CilBytecodeParser
  isExternal: true
  name: CilBytecodeParser
  nameWithType: CilBytecodeParser
  fullName: CilBytecodeParser
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: CilBytecodeParser.Signature.#ctor*
  commentId: Overload:CilBytecodeParser.Signature.#ctor
  isExternal: true
  name: Signature
  nameWithType: Signature.Signature
  fullName: CilBytecodeParser.Signature.Signature
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
- uid: System.IO.EndOfStreamException
  commentId: T:System.IO.EndOfStreamException
  isExternal: true
- uid: CilBytecodeParser.CilParserException
  commentId: T:CilBytecodeParser.CilParserException
  isExternal: true
  name: CilParserException
  nameWithType: CilParserException
  fullName: CilBytecodeParser.CilParserException
- uid: System.NotSupportedException
  commentId: T:System.NotSupportedException
  isExternal: true
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Reflection.Module
  commentId: T:System.Reflection.Module
  parent: System.Reflection
  isExternal: true
  name: Module
  nameWithType: Module
  fullName: System.Reflection.Module
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: true
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: CilBytecodeParser.Signature.GetParamType*
  commentId: Overload:CilBytecodeParser.Signature.GetParamType
  isExternal: true
  name: GetParamType
  nameWithType: Signature.GetParamType
  fullName: CilBytecodeParser.Signature.GetParamType
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: true
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: CilBytecodeParser.TypeSpec
  commentId: T:CilBytecodeParser.TypeSpec
  parent: CilBytecodeParser
  isExternal: true
  name: TypeSpec
  nameWithType: TypeSpec
  fullName: CilBytecodeParser.TypeSpec
- uid: CilBytecodeParser.Signature.GetParamTypes*
  commentId: Overload:CilBytecodeParser.Signature.GetParamTypes
  isExternal: true
  name: GetParamTypes
  nameWithType: Signature.GetParamTypes
  fullName: CilBytecodeParser.Signature.GetParamTypes
- uid: CilBytecodeParser.TypeSpec[]
  isExternal: true
  name: TypeSpec[]
  nameWithType: TypeSpec[]
  fullName: CilBytecodeParser.TypeSpec[]
  nameWithType.vb: TypeSpec()
  fullName.vb: CilBytecodeParser.TypeSpec()
  name.vb: TypeSpec()
  spec.csharp:
  - uid: CilBytecodeParser.TypeSpec
    name: TypeSpec
    nameWithType: TypeSpec
    fullName: CilBytecodeParser.TypeSpec
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: CilBytecodeParser.TypeSpec
    name: TypeSpec
    nameWithType: TypeSpec
    fullName: CilBytecodeParser.TypeSpec
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CilBytecodeParser.Signature.ToString*
  commentId: Overload:CilBytecodeParser.Signature.ToString
  isExternal: true
  name: ToString
  nameWithType: Signature.ToString
  fullName: CilBytecodeParser.Signature.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: CilBytecodeParser.Signature.CallingConvention*
  commentId: Overload:CilBytecodeParser.Signature.CallingConvention
  isExternal: true
  name: CallingConvention
  nameWithType: Signature.CallingConvention
  fullName: CilBytecodeParser.Signature.CallingConvention
- uid: CilBytecodeParser.CallingConvention
  commentId: T:CilBytecodeParser.CallingConvention
  parent: CilBytecodeParser
  isExternal: true
  name: CallingConvention
  nameWithType: CallingConvention
  fullName: CilBytecodeParser.CallingConvention
- uid: CilBytecodeParser.Signature.HasThis*
  commentId: Overload:CilBytecodeParser.Signature.HasThis
  isExternal: true
  name: HasThis
  nameWithType: Signature.HasThis
  fullName: CilBytecodeParser.Signature.HasThis
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: CilBytecodeParser.Signature.ExplicitThis*
  commentId: Overload:CilBytecodeParser.Signature.ExplicitThis
  isExternal: true
  name: ExplicitThis
  nameWithType: Signature.ExplicitThis
  fullName: CilBytecodeParser.Signature.ExplicitThis
- uid: CilBytecodeParser.Signature.ReturnType*
  commentId: Overload:CilBytecodeParser.Signature.ReturnType
  isExternal: true
  name: ReturnType
  nameWithType: Signature.ReturnType
  fullName: CilBytecodeParser.Signature.ReturnType
- uid: CilBytecodeParser.Signature.ParamsCount*
  commentId: Overload:CilBytecodeParser.Signature.ParamsCount
  isExternal: true
  name: ParamsCount
  nameWithType: Signature.ParamsCount
  fullName: CilBytecodeParser.Signature.ParamsCount
- uid: CilBytecodeParser.Signature.ParamTypes*
  commentId: Overload:CilBytecodeParser.Signature.ParamTypes
  isExternal: true
  name: ParamTypes
  nameWithType: Signature.ParamTypes
  fullName: CilBytecodeParser.Signature.ParamTypes
- uid: System.Collections.Generic.IEnumerable{CilBytecodeParser.TypeSpec}
  commentId: T:System.Collections.Generic.IEnumerable{CilBytecodeParser.TypeSpec}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TypeSpec>
  nameWithType: IEnumerable<TypeSpec>
  fullName: System.Collections.Generic.IEnumerable<CilBytecodeParser.TypeSpec>
  nameWithType.vb: IEnumerable(Of TypeSpec)
  fullName.vb: System.Collections.Generic.IEnumerable(Of CilBytecodeParser.TypeSpec)
  name.vb: IEnumerable(Of TypeSpec)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CilBytecodeParser.TypeSpec
    name: TypeSpec
    nameWithType: TypeSpec
    fullName: CilBytecodeParser.TypeSpec
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CilBytecodeParser.TypeSpec
    name: TypeSpec
    nameWithType: TypeSpec
    fullName: CilBytecodeParser.TypeSpec
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
